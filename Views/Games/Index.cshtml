@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "Game List";
}

<div class="container-fluid">
    <h1 class="mb-4">ðŸŽ® Game List</h1>

    <!-- Filters -->
    <div class="card mb-4 shadow-sm border-0">
        <div class="card-body">
            <form class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Genre</label>
                    <select class="form-select">
                        <option>All</option>
                        <option>Action</option>
                        <option>Simulation</option>
                        <option>RPG</option>
                        <option>Strategy</option>
                        <option>Racing</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Sentiment Range</label>
                    <select class="form-select">
                        <option>All</option>
                        <option>0.8 - 1.0</option>
                        <option>0.6 - 0.8</option>
                        <option>0.4 - 0.6</option>
                        <option>0.0 - 0.4</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Release Date</label>
                    <input type="date" class="form-control" />
                </div>
                <div class="col-md-3 align-self-end">
                    <button type="submit" class="btn btn-primary w-100">Filter</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Games Table -->
    <div class="card shadow-sm border-0">
        <div class="card-body">
            <table class="table table-hover table-bordered" id="gamesTable">
                <thead class="table-light">
                    <tr>
                        <th onclick="sortTable(0)">App ID</th>
                        <th onclick="sortTable(1)">Name</th>
                        <th>Genre</th>
                        <th onclick="sortTable(3)">Avg. Sentiment</th>
                        <th>% Recommended</th>
                        <th>% Not Rec.</th>
                        <th onclick="sortTable(6)">Total Reviews</th>
                        <th>Release Date</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var g in Model)
                {
                    <tr>
                        <td>@g.AppId</td>
                        <td>@g.AppName</td>
                        <td>@g.Genre</td>
                        <td>@g.AvgSentiment.ToString("0.00")</td>
                        <td class="text-success fw-bold">@g.RecommendedPct%</td>
                        <td class="text-danger fw-bold">@g.NotRecommendedPct%</td>
                        <td>@g.ReviewCount</td>
                        <td>@g.ReleaseDate.ToString("yyyy-MM-dd")</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <nav aria-label="Page navigation" class="mt-3">
        <ul class="pagination justify-content-center">
            <li class="page-item disabled"><a class="page-link">Previous</a></li>
            <li class="page-item active"><a class="page-link">1</a></li>
            <li class="page-item"><a class="page-link" href="#">2</a></li>
            <li class="page-item"><a class="page-link" href="#">3</a></li>
            <li class="page-item"><a class="page-link" href="#">Next</a></li>
        </ul>
    </nav>
</div>

@section Scripts {
<script>
    // Simple table sorter
    function sortTable(n) {
        var table = document.getElementById("gamesTable");
        var switching = true, dir = "asc", switchcount = 0;

        while (switching) {
            switching = false;
            var rows = table.rows;
            for (var i = 1; i < (rows.length - 1); i++) {
                var shouldSwitch = false;
                var x = rows[i].getElementsByTagName("TD")[n];
                var y = rows[i + 1].getElementsByTagName("TD")[n];
                var cmpX = isNaN(parseFloat(x.innerText)) ? x.innerText.toLowerCase() : parseFloat(x.innerText);
                var cmpY = isNaN(parseFloat(y.innerText)) ? y.innerText.toLowerCase() : parseFloat(y.innerText);

                if ((dir === "asc" && cmpX > cmpY) || (dir === "desc" && cmpX < cmpY)) {
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                switchcount++;
            } else {
                if (switchcount === 0 && dir === "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
}
